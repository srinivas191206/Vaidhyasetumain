// Firestore Security Rules for Vaidhya Setu Telemedicine Platform
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for user authentication and role checking
    function isAuthenticated() {
      // For development/testing, allow access without authentication
      // In production, uncomment the line below and comment out "return true"
      return true;
      // return request.auth != null;
    }
    
    function isOwner(userId) {
      // For development/testing, allow access without authentication
      // In production, uncomment the line below and comment out "return true"
      return true;
      // return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      // For development/testing, allow all roles
      // In production, implement proper role checking
      return true;
      /*
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
      */
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Patients collection - patients can read/write their own data, doctors can read
    match /patients/{patientId} {
      allow read, write: if isAuthenticated() && (
        isOwner(patientId) || 
        hasRole('doctor') || 
        hasRole('healthCenterStaff') ||
        // Allow hardcoded health center ID for testing
        request.auth == null
      );
    }
    
    // Doctors collection - public read, doctors can write their own data
    match /doctors/{doctorId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(doctorId);
    }
    
    // Health Centers collection - public read for authenticated users
    match /healthCenters/{centerId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('admin') || hasRole('healthCenterStaff') || request.auth == null;
    }
    
    // Appointments collection - complex rules based on participants
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && (
        resource.data.patientId == request.auth.uid ||
        resource.data.doctorId == request.auth.uid ||
        resource.data.healthCenterId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.healthCenters ||
        hasRole('doctor') ||
        hasRole('healthCenterStaff') ||
        // Allow hardcoded IDs for testing
        request.auth == null
      );
      
      allow create: if isAuthenticated() && (
        hasRole('patient') ||
        hasRole('healthCenterStaff') ||
        // Allow creation for testing
        request.auth == null
      );
      
      allow update: if isAuthenticated() && (
        resource.data.patientId == request.auth.uid ||
        resource.data.doctorId == request.auth.uid ||
        hasRole('doctor') ||
        hasRole('healthCenterStaff') ||
        // Allow updates for testing
        request.auth == null
      );
    }
    
    // Prescriptions collection
    match /prescriptions/{prescriptionId} {
      allow read: if isAuthenticated() && (
        resource.data.patientId == request.auth.uid ||
        resource.data.doctorId == request.auth.uid ||
        hasRole('healthCenterStaff') ||
        // Allow for testing
        request.auth == null
      );
      
      allow create, update: if isAuthenticated() && (
        hasRole('doctor') ||
        hasRole('healthCenterStaff') ||
        // Allow for testing
        request.auth == null
      );
    }
    
    // Feedback collection
    match /feedback/{feedbackId} {
      allow read: if isAuthenticated() && (
        resource.data.patientId == request.auth.uid ||
        resource.data.doctorId == request.auth.uid ||
        hasRole('admin') ||
        // Allow for testing
        request.auth == null
      );
      
      allow create: if isAuthenticated() && (hasRole('patient') || request.auth == null);
      allow update: if isAuthenticated() && (hasRole('admin') || request.auth == null);
    }
    
    // Messages collection for chat functionality
    match /messages/{messageId} {
      allow read, write: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid ||
        hasRole('doctor') ||
        hasRole('healthCenterStaff') ||
        // Allow for testing
        request.auth == null
      );
    }
    
    // Video call signaling collection
    match /videoCalls/{callId} {
      allow read, write: if isAuthenticated() && (
        resource.data.patientId == request.auth.uid ||
        resource.data.doctorId == request.auth.uid ||
        hasRole('healthCenterStaff') ||
        // Allow for testing
        request.auth == null
      );
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || request.auth == null);
      allow create: if isAuthenticated() || request.auth == null;
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || request.auth == null);
    }
    
    // Medicine inventory requests
    match /medicineRequests/{requestId} {
      allow read: if isAuthenticated() && (
        hasRole('healthCenterStaff') ||
        hasRole('admin') ||
        // Allow for testing
        request.auth == null
      );
      
      allow create: if isAuthenticated() && (hasRole('healthCenterStaff') || request.auth == null);
      allow update: if isAuthenticated() && (hasRole('admin') || request.auth == null);
    }
  }
}